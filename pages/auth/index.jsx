import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useSession, signIn, signOut, getProviders } from 'next-auth/react';
import { useRouter } from 'next/router';
import { useSelector, useDispatch } from 'react-redux';
import Head from 'next/head';
import Image from 'next/image';

import Google from '../../src/assets/images/google.png';
import Facebook from '../../src/assets/images/facebook.png';
import { loginAsync, loginOauthAsync, registerAsync, registerOauthAsync } from '../../src/store/auth/reducer';
import { setOauthProvider } from '../../src/store/auth/action';

const Auth = ({ providers }) => {
	const router = useRouter();

	const authSelector = useSelector(({ auth }) => auth);
	const dispatch = useDispatch();

	const { data: session } = useSession();
	const { data } = useSession();

	const { register, formState: { errors }, handleSubmit } = useForm();

	const [validPattern, setValidPattern] = useState(null);
	const [loading, setLoading] = useState(false);
	const [login, setLogin] = useState(false);

	const { user } = authSelector;

	const images = {
		google: Google,
		facebook: Facebook,
	};

	useEffect(() => {
		const token = localStorage.getItem('token');
		if (token) router.push('/');
	}, [user]);

	useEffect(() => {
		const provider = localStorage.getItem('provider');

		if (data?.accessToken && provider) {
			onSubmitOauth();
		}
	}, [data?.accessToken]);

	const onSubmit = async (data) => {
		setLoading(true);
		setValidPattern(null);
		try {
			let body;

			if (data.emailOrPhone.match(/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/)) {
				body = {
					email: data.emailOrPhone
				};
			} else if (data.emailOrPhone.match(/^[0-9]+$/)) {
				if (data.emailOrPhone[0] == '0') {
					body = {
						phone: `+62${ data.emailOrPhone.slice(1, data.emailOrPhone.length) }`
					};
				} else {
					setValidPattern('Invalid Phone Number');
				}
			} else setValidPattern('Invalid Email or Phone Number');

			if (body) {
				if (login) dispatch(loginAsync(body));
				else dispatch(registerAsync(body));
				setLogin(true);
			}
		} catch (error) {
		}
		setLoading(false);
	};

	const oauth = (provider) => {
		signIn(provider);
		localStorage.setItem('provider', provider);
	};

	const onSubmitOauth = async () => {
		const authType = localStorage.getItem('authType');
		if (authType == 'login') dispatch(loginOauthAsync({ token: data?.accessToken }));
		else dispatch(registerOauthAsync({ token: data?.accessToken }));
		setLogin(true);
		localStorage.removeItem('provider');
	};

	return (
		<div className='h-screen grid'>
			<Head>
				<title>{ login ? 'SignIn' : 'SignUp' }</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<div className='m-auto w-96 bg-sky-900 aspect-square text-white p-8 rounded-lg'>
				<p className='text-center'>{ login ? 'Login' : 'Register' }</p>
				<form onSubmit={ handleSubmit(onSubmit) } className='mt-8 h-full flex flex-col justify-between'>
					<div>
						<label htmlFor=''>Email or Phone Number</label>
						<br />
						<input
							type='text'
							className='mt-2 p-4 text-sky-900 focus:ring-2 focus:ring-blue-500 focus:outline-none appearance-none w-full text-sm leading-6 placeholder-slate-400 py-2 px-1 ring-1 ring-slate-200 shadow-sm'
							{ ...register('emailOrPhone', { required: true }) }
						/>
						<br />
						{ errors.emailOrPhone?.type === 'required' && 'Email or Phone Number is required' }
						{ validPattern }
					</div>
					<br />

					{ !loading
						?
						<input type='submit' value={ login ? 'LogIn' : 'SignUp' } className='bg-violet-600 p-2 cursor-pointer' />
						:
						<input type='button' value='loading' className='bg-gray-600 p-2' />
					}
				</form>
				<div className='flex justify-center items-center gap-8 mt-4'>
					{ providers && Object.values(providers).map((provider) => (
						<div key={ provider.name }>
							<button onClick={ () => oauth(provider.id) }>
								<Image src={ images[provider?.id] } width={ 30 } height={ 30 } />
							</button>
						</div>
					)) }
				</div>
				<div className='mt-4'>
					<p>Have an account?</p>
					<div
						className='cursor-pointer w-24 py-2 text-center bg-violet-600'
						onClick={ () => {
							setLogin(!login);
							if (login) localStorage.setItem('authType', 'register');
							else localStorage.setItem('authType', 'login');
						} }
					>
						{ !login ? 'Login' : 'Register' }
					</div>
				</div>
			</div>
		</div>
	);
};

export default Auth;


export async function getServerSideProps(context) {
	const providers = await getProviders();
	return {
		props: { providers },
	};
}
